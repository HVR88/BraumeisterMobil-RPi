send recipe:
curl -X POST -d @test.txt http://IP_OF_YOUR_BRAUMEISTER/rz.txt --header "Content-Type: application/x-www-form-urlencoded; charset=UTF-8"
test.txt contains:

rz=1X53X53X10X66X75X73X10X78X10X0X0X90X102X60X45X30X15X5X2.Name of the Beer

1X53 = Mash in temperature 1= index of recipe (index starts from 0)
X53X10 = 1 st step (10 min@53°C)
X66X75 = 2nd step (75 min@66°C )
X73X10 = 3rd step (10 min@73°C)
X78X10 = 4th step (10 min@78°C)
X0X0 = 5th step (not used)
X90X102 = boiling time and temperature (90 min @ 102°C)
X60 (hop 1 @ 60min)
X45 (hop 2 @ 45min)
X30 (hop 3 @ 30min)
X15 (hop 4 @ 15min)
X5 (hop 5 @ 5min)
X2 (hop 6 @ 2min)
.Name of the Beer

the hop additions have to be in correct order.

You can add recipes without deleting them all just calling the rz.txt again.


BM\x96\x03\x00\x00\x00\x00\x00\x00v\x00\x00\x00(\x00\x00\x00(\x00\x00\x00(\x00\x00\x00\x01\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x17\x00\x00\x11\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x02\x04\x00\x0c\x8a\xa0\x00\x14\xcd\xef\x00\xab\xf0\xfc\x00\x07IW\x00l\xe6\xfc\x00\x04$-\x00\x14\xd6\xfc\x00\x14\xac\xc7\x00\x0co\x81\x00\xf8\xfe\xfc\x00\x12\x9c\xb6\x00\x04\x17\x1c\x00\x14\xc1\xe2\x00\x049A\x00\x0cUb\x00\r\n'

#<PIL.BmpImagePlugin.BmpImageFile image mode=P size=40x40 at 0xB32DED30>
ISO-8859-1

apple.decode('iso-8859-1').encode('utf8')



st = '\x96\x03\x00\x00\x00\x00\x00\x00v\x00\x00\x00(\x00\x00\x00(\x00\x00\x00(\x00\x00\x00\x01\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x17\x00\x00\x11\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x02\x04\x00\x0c\x8a\xa0\x00\x14\xcd\xef\x00\xab\xf0\xfc\x00\x07IW\x00l\xe6\xfc\x00\x04$-\x00\x14\xd6\xfc\x00\x14\xac\xc7\x00\x0co\x81\x00\xf8\xfe\xfc\x00\x12\x9c\xb6\x00\x04\x17\x1c\x00\x14\xc1\xe2\x00\x049A\x00\x0cUb\x00'
stt = st.encode('hex')

BM                  id
\x96\x03\x00\x00    size
\x00\x00            reserved
\x00\x00v           reserved
\x00\x00\x00(\x00   offset
=14 bytes

\x00\x00(\x00\x00\x00(\x00\x00\x00\x01\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x17\x00\x00\x11\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x02\x04\x00\x0c\x8a\xa0\x00\x14\xcd\xef\x00\xab\xf0\xfc\x00\x07IW\x00l\xe6\xfc\x00\x04$-\x00\x14\xd6\xfc\x00\x14\xac\xc7\x00\x0co\x81\x00\xf8\xfe\xfc\x00\x12\x9c\xb6\x00\x04\x17\x1c\x00\x14\xc1\xe2\x00\x049A\x00\x0cUb\x00\r\n'


Type "help", "copyright", "credits" or "license" for more information.
st = '\x96\x03\x00\x00\x00\x00\x00\x00v\x00\x00\x00(\x00\x00\x00(\x00\x00\x00(\x00\x00\x00\x01\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x17\x00\x00\x11\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x02\x04\x00\x0c\x8a\xa0\x00\x14\xcd\xef\x00\xab\xf0\xfc\x00\x07IW\x00l\xe6\xfc\x00\x04$-\x00\x14\xd6\xfc\x00\x14\xac\xc7\x00\x0co\x81\x00\xf8\xfe\xfc\x00\x12\x9c\xb6\x00\x04\x17\x1c\x00\x14\xc1\xe2\x00\x049A\x00\x0cUb\x00'
img = '\x42\x4d\x96\x03\x00\x00\x00\x00\x00\x00v\x00\x00\x00(\x00\x00\x00(\x00\x00\x00(\x00\x00\x00\x01\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x17\x00\x00\x11\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x02\x04\x00\x0c\x8a\xa0\x00\x14\xcd\xef\x00\xab\xf0\xfc\x00\x07IW\x00l\xe6\xfc\x00\x04$-\x00\x14\xd6\xfc\x00\x14\xac\xc7\x00\x0co\x81\x00\xf8\xfe\xfc\x00\x12\x9c\xb6\x00\x04\x17\x1c\x00\x14\xc1\xe2\x00\x049A\x00\x0cUb\x00'


pre_arr = map(ord,img) #not array
ba = map(lambda x: "{0:b}".format(x), pre_arr) # works as array



#make array
array2 = np.asarray(img)


#needs an array
ime = Image.fromarray(numpy_arr)


 binascii.unhexlify(hexstr) # return bnary data

new_data = []
for i in range(0, len(data), 8):
    new_data.append(data[i:i+8])  # 8 digit binary list
int_data = [] 
for i in new_data:
    int_data.append(int(i,2))  # bytearray will convert decimal to hex
a= bytearray(int_data)

['10010110', '11', '0', '0', '0', '0', '0', '0', '1110110', '0', '0', '0', '101000', '0', '0', '0', '101000', '0', '0', '0', '101000', '0', '0', '0', '1', '0', '100', '0', '0', '0', '0', '0', '0', '0', '0', '0', '10001', '10111', '0', '0', '10001', '10111', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '100', '10', '100', '0', '1100', '10001010', '10100000', '0', '10100', '11001101', '11101111', '0', '10101011', '11110000', '11111100', '0', '111', '1001001', '1010111', '0', '1101100', '11100110', '11111100', '0', '100', '100100', '101101', '0', '10100', '11010110', '11111100', '0', '10100', '10101100', '11000111', '0', '1100', '1101111', '10000001', '0', '11111000', '11111110', '11111100', '0', '10010', '10011100', '10110110', '0', '100', '10111', '11100', '0', '10100', '11000001', '11100010', '0', '100', '111001', '1000001', '0', '1100', '1010101', '1100010', '0']
